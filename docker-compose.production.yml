version: '3.8'

# 电梯备忘录系统 - Docker Compose 生产环境配置

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: elevator-memo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: elevator_memo
      POSTGRES_USER: elevator_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/init-production.sql:/docker-entrypoint-initdb.d/02-production.sql:ro
    networks:
      - elevator_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elevator_user -d elevator_memo"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: elevator-memo-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: elevator_memo
      DB_USER: elevator_user
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
    volumes:
      - uploads_data:/app/uploads
      - backend_logs:/app/logs
    networks:
      - elevator_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # 前端静态服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: elevator-memo-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    networks:
      - elevator_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  # Nginx 反向代理和负载均衡
  nginx:
    image: nginx:1.24-alpine
    container_name: elevator-memo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites/elevator-memo.conf:/etc/nginx/conf.d/default.conf:ro
      - uploads_data:/usr/share/nginx/html/uploads:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - elevator_network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'


# 网络配置
networks:
  elevator_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 持久化存储
volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
